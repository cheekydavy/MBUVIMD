"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LT_HASH_ANTI_TAMPERING = void 0;
const crypto_1 = require("./crypto");
const o = 128;
class d {
    constructor(e) {
        this.salt = e;
    }
    async add(e, t) {
        for (const item of t) {
            e = await this._addSingle(e, item);
        }
        return e;
    }
    async subtract(e, t) {
        for (const item of t) {
            e = await this._subtractSingle(e, item);
        }
        return e;
    }
    async subtractThenAdd(e, subtractList, addList) {
        const subtracted = await this.subtract(e, subtractList);
        return await this.add(subtracted, addList);
    }
    async _addSingle(e, t) {
        const n = new Uint8Array(await (0, crypto_1.hkdf)(Buffer.from(t), o, { info: this.salt })).buffer;
        return this.performPointwiseWithOverflow(await e, n, (a, b) => a + b);
    }
    async _subtractSingle(e, t) {
        const n = new Uint8Array(await (0, crypto_1.hkdf)(Buffer.from(t), o, { info: this.salt })).buffer;
        return this.performPointwiseWithOverflow(await e, n, (a, b) => a - b);
    }
    performPointwiseWithOverflow(e, t, r) {
        const n = new DataView(e), i = new DataView(t), a = new ArrayBuffer(n.byteLength), s = new DataView(a);
        for (let e = 0; e < n.byteLength; e += 2) {
            s.setUint16(e, r(n.getUint16(e, true), i.getUint16(e, true)), true);
        }
        return a;
    }
}
exports.LT_HASH_ANTI_TAMPERING = new d('WhatsApp Patch Integrity');
